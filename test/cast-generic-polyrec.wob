// @FAIL-PARAMETRIC
// @FAIL-V8

// Polymorphic recursion

let n = 20;

class C<X>(x : X) { let x : X = x };
var p : Object[] = new Object[n](null);

func polyr<X>(i : Int, x : X) {
  if i == n { return };
  let cx = new C<X>(x);
  p[i] := cx;
  polyr<C<X>>(i + 1, cx);
};

polyr<Int$>(0, 9$);
assert p[0] :> C<Int$> != null;
assert p[0] :> C<C<Int$>> == null;
assert p[0] :> C<C<C<Int$>>> == null;
assert p[0] :> C<Bool$> == null;

assert p[1] :> C<Int$> == null;
assert p[1] :> C<C<Int$>> != null;
assert p[1] :> C<C<C<Int$>>> == null;
assert p[1] :> C<C<Bool$>> == null;

assert p[2] :> C<Int$> == null;
assert p[2] :> C<C<Int$>> == null;
assert p[2] :> C<C<C<Int$>>> != null;
assert p[2] :> C<C<C<C<Int$>>>> == null;
assert p[2] :> C<C<C<Bool$>>> == null;

{
  var i : Int = 0;
  while i < n {
    var j : Int = 0;
    while j < n {
      assert (i == j) == (p[i] == p[j]);
      j := j + 1;
    };
    i := i + 1;
  }
};

//{
  var i : Int = 0;
  func check<X>(j : Int) {
    if j < n {
      assert (i == j) == (p[i] :> C<X> != null);
      if i < n - 1 && i == j {
        assert p[i] == (p[i + 1] :> C<C<X>>).x;
      };
      check<C<X>>(j + 1);
    }
  };
  while i < n {
    check<Int$>(0);
    i := i + 1;
  }
//};
