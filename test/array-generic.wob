// Generic array types

func make<T>(n : Int, x : T) : T[] {
  return new T[n](x);
};

let a1 = new Int$[5](7$);
let a2 = make<Int$>(6, 8$);

[a1, a2];
if true { a1 } else { a2 };

();


// Subtyping

class C(i : Int) { let n = i };
class D(i : Int) <: C(i) { let m = 2*i };

let da_mut = [new D(1), new D(2), new D(3)];
let da_const = da_mut : D[]!;
let ca_const = da_mut : C[]!;
let ca_const2 = da_const : C[]!;

func idx<T>(a : T[]!, i : Int) : T { a[i] };
func upd<T>(a : T[], i : Int, x : T) { a[i] := x };

assert idx<D>(da_mut, 2).m == 6;
assert idx<D>(da_const, 2).m == 6;
assert idx<C>(da_mut, 2).n == 3;
assert idx<C>(da_const, 2).n == 3;
assert idx<C>(ca_const2, 2).n == 3;
assert idx<C>(ca_const2, 2).n == 3;

upd<D>(da_mut, 2, new D(4));
assert idx<D>(da_mut, 2).m == 8;
assert idx<D>(da_const, 2).m == 8;
assert idx<C>(da_mut, 2).n == 4;
assert idx<C>(da_const, 2).n == 4;
assert idx<C>(ca_const2, 2).n == 4;
assert idx<C>(ca_const2, 2).n == 4;
