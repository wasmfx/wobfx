// Literals

let a0 = [];
let an = [null, null];
let ab = [true, false];
let ai = [0, 1, 2];
let af = [0.0, 1.0, 2.0];
let aa = [[0], [1], [2]];


// Constructor

let db = new Bool[10](false);
let di = new Int[20](12);
let df = new Float[20](3.14);
let da = new Int[][20]([13, 14]);


// Length

assert #a0 == 0;
assert #an == 2;
assert #ab == 2;
assert #ai == 3;
assert #af == 3;
assert #aa == 3;
assert #aa[0] == 1;

assert #db == 10;
assert #di == 20;
assert #df == 20;
assert #da == 20;
assert #da[10] == 2;


// Indexing

assert an[0] == null;

assert ab[0];
assert ! ab[1];

assert ai[0] == 0;
assert ai[2] == 2;

assert af[0] == 0.0;
assert af[2] == 2.0;

assert aa[0][0] == 0;
assert aa[2][0] == 2;

assert ! db[5];
assert di[7] == 12;
assert df[0] == 3.14;
assert da[19][1] == 14;


// Assignment

ab[0] := false;
assert ! ab[0];

aa[1] := [3, 4];
assert aa[1][1] == 4;

da[2][0] := 15;
assert da[4][0] == 15;


// Loop

let enum = new Int[100](0);
var i : Int = 0;
while i < #enum {
  enum[i] := i;
  i := i + 1;
};

var sum : Int = 0;
i := 0;
while i < #enum {
  sum := sum + enum[i];
  i := i + 1;
};
assert sum == #enum*(#enum - 1)/2;


// Subtyping

class C(i : Int) { let n = i };
class D(i : Int) <: C(i) { let m = 2*i };

let da_mut = [new D(1), new D(2), new D(3)];
let da_const = da_mut : D[]!;
let ca_const = da_mut : C[]!;
let ca_const2 = da_const : C[]!;

assert da_mut[2].m == 6;
assert da_const[2].m == 6;
assert da_mut[2].n == 3;
assert da_const[2].n == 3;
assert ca_const2[2].n == 3;
assert ca_const2[2].n == 3;

da_mut[2] := new D(4);
assert da_mut[2].m == 8;
assert da_const[2].m == 8;
assert da_mut[2].n == 4;
assert da_const[2].n == 4;
assert ca_const2[2].n == 4;
assert ca_const2[2].n == 4;
